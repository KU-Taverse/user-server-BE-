package ku.user.user.mock;

import ku.user.user.infrastructure.entity.UserEntity;
import ku.user.user.infrastructure.repository.UserRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<UserEntity> data = Collections.synchronizedList(new ArrayList<>());
    @Override
    public Optional<UserEntity> findById(Long id) {
        return Optional.empty();
    }

    @Override
    public Optional<UserEntity> findByEmail(String email) {
        return Optional.empty();
    }

    @Override
    public Optional<UserEntity> findByNickname(String nickname) {
        return Optional.empty();
    }

    @Override
    public UserEntity save(UserEntity user) {
        if (user.getId() == null || user.getId() == 0) {
            UserEntity newUser = UserEntity.builder()
                    .email(user.getEmail())
                    .nickname(user.getNickname())
                    .build();
            data.add(newUser);
            return newUser;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), user.getId()));
            data.add(user);
            return user;
        }
    }

    @Override
    public void delete(UserEntity userEntity) {

    }
}
